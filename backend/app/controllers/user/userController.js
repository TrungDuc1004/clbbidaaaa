const User = require('../../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// üìå ƒêƒÉng k√Ω user
exports.registerUser = async (req, res) => {
    try {
        const { username, email, password } = req.body;

        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (!username || !email || !password) {
            return res.status(400).json({ error: 'Email, username v√† password l√† b·∫Øt bu·ªôc' });
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω' });
        }

        // BƒÉm m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // L∆∞u user m·ªõi
        const newUser = new User({ username, email, password: hashedPassword, role: "user", });
        await newUser.save();

        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
    } catch (error) {
        console.error('L·ªói khi ƒëƒÉng k√Ω:', error);
        res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
    }
};

// üìå ƒêƒÉng nh·∫≠p user
exports.loginUser = (req, res) => {
    const { email, password } = req.body;
    // T√¨m ng∆∞·ªùi d√πng theo email
    User.findOne({ email })
        .then((user) => {
            if (!user) {
                // return res.status(404).send('User not found');
                return res.status(400).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
            }
            // So s√°nh m·∫≠t kh·∫©u
            bcrypt.compare(password, user.password)
                .then((isPasswordValid) => {
                    if (!isPasswordValid) {
                        // return res.status(400).send('Invalid credentials');
                        return res.status(400).json({ error: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" });
                    }
                    // T·∫°o token
                    const token = jwt.sign({ userId: user._id, role: user.role }, process.env.JWT_SECRET || 'secret_key', { expiresIn: '30 minutes' });
                    res.status(200).json({ token, username: user.username, role: user.role });
                });
        })
        .catch((error) => {
            // console.error('Login error:', error); // Log l·ªói n·∫øu c·∫ßn debug
            // res.status(400).send('Error logging in');
            return res.status(400).json({ error: "ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng!" });
        });
};

// put[/user/profile]
exports.profileUser = (req, res) => {
    const { phonenumber, address, city, country } = req.body;
    User.findOneAndUpdate({ username: req.body.username }, { phonenumber, address, city, country }, { new: true })
        .then(updatedUser => {
            if (!updatedUser) {
                return res.status(404).json({ error: 'User not found' });
            }
            res.json(updatedUser);
        })
        .catch(error => {
            console.error('Error updating profile:', error);
            res.status(500).json({ error: 'Internal server error' });
        });
};

// üìå L·∫•y th√¥ng tin profile user
exports.getProfileUser = async (req, res) => {
    try {
        if (!req.user || !req.user.userId) {
            return res.status(401).json({ error: 'Ch∆∞a x√°c th·ª±c' });
        }

        const user = await User.findById(req.user.userId).select('-password'); // ·∫®n m·∫≠t kh·∫©u

        if (!user) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
        }

        res.json(user);
    } catch (error) {
        console.error('L·ªói l·∫•y th√¥ng tin user:', error);
        res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
    }
};
