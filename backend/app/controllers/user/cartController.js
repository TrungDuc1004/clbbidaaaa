const Product = require('../../models/Product');
const ProductCart = require('../../models/ProductCart');
const Table = require('../../models/Table');
const Booking = require('../../models/Booking');

// üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (POST /bookings/add-item)

exports.addToCart = async (req, res) => {
    try {
        const userId = req.user?.userId;
        const { tableId, productId, quantity = 1 } = req.body;

        if (!userId) {
            return res.status(400).json({ message: 'Kh√¥ng c√≥ userId!' });
        }
        if (!tableId || !productId) {
            return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b√†n ho·∫∑c s·∫£n ph·∫©m!' });
        }

        // Ki·ªÉm tra b√†n & s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i
        const product = await Product.findById(productId);
        const table = await Table.findById(tableId);

        if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
        if (!table) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†n!' });

        // üëâ Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t b√†n ch∆∞a
        const existingBooking = await Booking.findOne({ userId, tableId, status: "booked" });

        if (!existingBooking) {
            return res.status(403).json({ message: 'B·∫°n ch∆∞a ƒë·∫∑t b√†n n√†y ho·∫∑c b√†n ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n!' });
        }

        // üëâ N·∫øu ƒë√£ ƒë·∫∑t b√†n, x·ª≠ l√Ω th√™m s·∫£n ph·∫©m
        let cartItem = await ProductCart.findOne({ userId, productId, tableId });

        if (cartItem) {
            cartItem.quantity += quantity;
            await cartItem.save();
        } else {
            cartItem = new ProductCart({
                userId,
                tableId,
                tableName: table.name,
                productId,
                name: product.name,
                image: product.image,
                price: product.price,
                quantity
            });
            await cartItem.save();
        }

        return res.status(200).json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (error) {
        console.error('L·ªói khi th√™m v√†o gi·ªè h√†ng:', error);
        return res.status(500).json({ message: 'L·ªói server!' });
    }
};


// üõí L·∫•y danh s√°ch s·∫£n ph·∫©m trong b√†n (GET /bookings/cart)
exports.getCart = async (req, res) => {
    try {
        const userId = req.user?.userId;

        if (!userId) {
            return res.status(401).json({ message: 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!' });
        }

        // L·∫•y danh s√°ch bookings c·ªßa user ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n
        const bookings = await Booking.find({ userId, status: 'booked' })
            .populate('tables.tableId'); // L·∫•y th√¥ng tin b√†n (name, image...)

        const formatted = bookings.map(booking => {
            const table = booking.tables[0]; // ch·ªâ x·ª≠ l√Ω 1 b√†n m·ªói booking
            return {
                _id: booking._id,
                time: table.time,
                location: table.location,
                totalPrice: booking.totalPrice,
                tableId: table.tableId?._id,
                tableName: table.tableId?.name,
                image: table.tableId?.image,
                orderedItems: table.orderedItems || []
            };
        });

        return res.json(formatted);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch b√†n:", error);
        return res.status(500).json({ message: "L·ªói server!" });
    }
};


// ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi b√†n (DELETE /bookings/cart/:id)
exports.deleteCartItem = async (req, res) => {
    try {
        await ProductCart.deleteOne({ _id: req.params.id });
        return res.status(200).json({ message: 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi b√†n' });
    } catch (error) {
        console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (PUT /bookings/cart/:id)
exports.updateCartQuantity = async (req, res) => {
    try {
        const { action } = req.body;
        const update = action === 'increase'
            ? { $inc: { quantity: 1 } }
            : action === 'decrease'
                ? { $inc: { quantity: -1 } }
                : null;

        if (!update) {
            return res.status(400).json({ message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!' });
        }

        await ProductCart.updateOne({ _id: req.params.id }, update);
        return res.status(200).json({ message: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng' });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa user (DELETE /bookings/cart)
exports.clearCart = async (req, res) => {
    try {
        await ProductCart.deleteMany({ userId: req.user.userId });
        return res.status(200).json({ message: 'ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng' });
    } catch (error) {
        console.error('L·ªói khi x√≥a gi·ªè h√†ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};
