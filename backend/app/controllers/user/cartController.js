const Product = require('../../models/Product');
const ProductCart = require('../../models/ProductCart');
const Table = require('../../models/Table');

// üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (POST /bookings/add-item)
exports.addToCart = async (req, res) => {
    try {
        const userId = req.user.userId;
        const { tableId, productId, quantity = 1 } = req.body;

        if (!tableId || !productId) {
            return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b√†n ho·∫∑c s·∫£n ph·∫©m!' });
        }

        // T√¨m s·∫£n ph·∫©m
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
        }

        // T√¨m b√†n
        const table = await Table.findById(tableId);
        if (!table) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†n!' });
        }

        // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        let cartItem = await ProductCart.findOne({ userId, productId, tableId });

        if (cartItem) {
            cartItem.quantity += quantity;
            await cartItem.save();
        } else {
            cartItem = new ProductCart({
                userId,
                tableId,
                tableName: table.name, // L∆∞u t√™n b√†n ƒë·ªÉ d·ªÖ hi·ªÉn th·ªã
                productId,
                name: product.name,
                image: product.image,
                price: product.price,
                quantity
            });
            await cartItem.save();
        }

        return res.status(200).json({ message: 'Th√™m s·∫£n ph·∫©m v√†o b√†n th√†nh c√¥ng!' });
    } catch (error) {
        console.error('L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// üõí L·∫•y danh s√°ch s·∫£n ph·∫©m trong b√†n (GET /bookings/cart)
exports.getCart = async (req, res) => {
    try {
        const userId = req.user.userId;
        if (!userId) {
            return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y userId!' });
        }

        // L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng theo userId
        const cartItems = await ProductCart.find({ userId }).populate('tableId', 'name location');

        // Nh√≥m s·∫£n ph·∫©m theo t·ª´ng b√†n
        const groupedCart = cartItems.reduce((acc, item) => {
            const tableKey = item.tableId._id;
            if (!acc[tableKey]) {
                acc[tableKey] = {
                    tableId: item.tableId._id,
                    tableName: item.tableId.name,
                    location: item.tableId.location,
                    products: []
                };
            }
            acc[tableKey].products.push(item);
            return acc;
        }, {});

        const cartByTables = Object.values(groupedCart);
        return res.json(cartByTables);
    } catch (error) {
        console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi b√†n (DELETE /bookings/cart/:id)
exports.deleteCartItem = async (req, res) => {
    try {
        await ProductCart.deleteOne({ _id: req.params.id });
        return res.status(200).json({ message: 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi b√†n' });
    } catch (error) {
        console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (PUT /bookings/cart/:id)
exports.updateCartQuantity = async (req, res) => {
    try {
        const { action } = req.body;
        const update = action === 'increase'
            ? { $inc: { quantity: 1 } }
            : action === 'decrease'
                ? { $inc: { quantity: -1 } }
                : null;

        if (!update) {
            return res.status(400).json({ message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!' });
        }

        await ProductCart.updateOne({ _id: req.params.id }, update);
        return res.status(200).json({ message: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng' });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};

// üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa user (DELETE /bookings/cart)
exports.clearCart = async (req, res) => {
    try {
        await ProductCart.deleteMany({ userId: req.user.userId });
        return res.status(200).json({ message: 'ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng' });
    } catch (error) {
        console.error('L·ªói khi x√≥a gi·ªè h√†ng:', error);
        return res.status(500).json({ message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i!' });
    }
};
